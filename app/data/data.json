{
    "lessons": [
        {
            "lesson": 1,
            "title": "Lesson 1 - The Basics of Python",
            "description": "Today we will learn about basic syntax, data types, and basic operations in Python. Let's get started!",
            "checkpoints": [
                {
                    "title": "What is a variable?",
                    "description": "A variable is a container for a value. It can be used to store data that can be referenced and manipulated in a program.",
                    "codeExample": "# Integer\nage = 25\nprint('Age:', age)\n\n# Float\nprice = 19.99\nprint('Price:', price)\n\n# String\nname = 'Alice'\nprint('Name:', name)\n\n# Boolean\nis_student = True\nprint('Is student:', is_student)",
                    "goal": "Complete the following code example by assigning your name, age, and a boolean value to the variables.",
                    "exercise": "name = # TODO add name\nage = # TODO change age\nis_student = # TODO add student status\n\nprint('Name:', name)\nprint('Age:', age)\nprint('Is student:', is_student)"
                },
                {
                    "title": "Understanding Basic Operations",
                    "description": "In Python, you can perform basic operations on variables such as addition, subtraction, multiplication, and division.",
                    "codeExample": "a = 10\nb = 3\n\n# Arithmetic operators\naddition = a + b\nprint(\"Addition:\", addition)  # Output: 13\nsubtraction = a - b\nprint(\"Subtraction:\", subtraction)  # Output: 7\nmultiplication = a * b\nprint(\"Multiplication:\", multiplication)  # Output: 30\ndivision = a / b\nprint(\"Division:\", division)  # Output: 3.333...\nmodulus = a % b\nprint(\"Modulus:\", modulus)  # Output: 1\n\n# Comparison operators\nprint(\"a equals b:\", a == b)  # Output: False\nprint(\"a not equals b:\", a != b)  # Output: True\nprint(\"a greater than b:\", a > b)  # Output: True\nprint(\"a less than b:\", a < b)  # Output: False\nprint(\"a greater than or equals b:\", a >= b)  # Output: True\nprint(\"a less than or equals b:\", a <= b)  # Output: False\n\n# Logical operators\nx = True\ny = False\nprint(\"x and y:\", x and y)  # Output: False\nprint(\"x or y:\", x or y)  # Output: True\nprint(\"not x:\", not x)  # Output: False",
                    "goal": "Write a program that takes two numbers as input, performs addition, subtraction, multiplication, and division, and prints the results.",
                    "exercise": "# Get the first number from the user\nnum1 = float(input('Enter the first number: '))\n\n# Get the second number from the user\nnum2 = float(input('Enter the second number: '))\n\n# TODO: Calculate the sum of the two numbers\n\n# TODO: Calculate the difference between the two numbers\n\n# TODO: Calculate the product of the two numbers\n\n# TODO: Calculate the quotient of the two numbers\n\n# Print the results\nprint('Sum:',      ) # Print the sum\nprint('Difference:', ) # Print the difference\nprint('Product:',   ) # Print the product\nprint('Quotient:',  ) # Print the quotient"
                },
                {
                    "title": "Working with Input and Output",
                    "description": "In Python, you can use the print function to output information and the input function to get user input.",
                    "codeExample": "# Output\nprint('Hello, world!')\n\n# Input\nuser_name = input('Enter your name: ')\nprint('Hello,', user_name)",
                    "goal": "Write a program that asks for your name and then greets you by name.",
                    "exercise": "# Get user's name\nname =  # YOUR CODE HERE\n\n# Greet the user\nprint(f'Hello, {  }!') # YOUR CODE HERE"
                },
                {
                    "title": "Comparison and Logical Operators",
                    "description": "Comparison operators compare two values and return a boolean result. Logical operators combine boolean values.",
                    "codeExample": "number1 = 7\nnumber2 = 5\n\nprint('number1 > number2:', number1 > number2)\nprint('number1 < number2:', number1 < number2)\nprint('number1 == number2:', number1 == number2)\n\nbool1 = True\nbool2 = False\n\nprint('bool1 and bool2:', bool1 and bool2)\nprint('bool1 or bool2:', bool1 or bool2)\nprint('not bool1:', not bool1)",
                    "goal": "Write a program that takes two numbers as input and prints whether the first number is greater than, less than, or equal to the second number. Also, print the result of logical operations between two boolean variables.",
                    "exercise": "# Get two numbers from the user\nnum1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\n\n# Compare the numbers and print the result\n# TODO check if num1 is greater than num2\n# TODO check if num2 is greater than num1\n# TODO check if num1 and num2 are equal\n\n# Logical operations on boolean variables\nbool1 = True\nbool2 = False\n\n# Print the results of logical operations\nprint(f\"{bool1} AND {bool2} is\", )  # complete logical AND\nprint(f\"{bool1} OR {bool2} is\", )   # complete logical OR\nprint(f\"NOT {bool1} is\", ) # complete logical NOT"
                },
                {
                    "title": "Data Structures",
                    "description": "Learn about different data structures in Python.",
                    "codeExample": "# Lists\nfruits = ['apple', 'banana', 'cherry']\nprint('Fruits:', fruits)\n\n# Tuples\npoint = (10, 20)\nprint('Point:', point)\n\n# Sets\nunique_numbers = {1, 2, 3, 2, 1}\nprint('Unique Numbers:', unique_numbers)\n\n# Dictionaries\nstudent = {'name': 'Alice', 'age': 25, 'is_student': True}\nprint('Student:', student)\n\n# List Comprehensions\nsquares = [x**2 for x in range(10)]\nprint('Squares:', squares)",
                    "goal": "Create a dictionary of a shopping list with items, and quantity needed. Then, print the shopping list.",
                    "exercise": "# TODO - Create a dictionary of a shopping list with items and quantity needed.\n\n# TODO - Your code here. Print the shopping list."
                }
            ]
        },
        {
            "lesson": 2,
            "title": "Lesson 2 - Control Flow and Functions",
            "description": "This lesson covers control flow statements like if-else and loops, and introduces functions for code reusability.",
            "checkpoints": [
                {
                    "title": "Conditional Statements",
                    "description": "Learn how to control the flow of your program based on conditions using if, elif, and else statements.",
                    "codeExample": "# Check if a number is positive, negative, or zero\nnumber = float(input(\"Enter a number: \"))\n\nif number > 0:\n    print(\"The number is positive.\")\nelif number < 0:\n    print(\"The number is negative.\")\nelse:\n    print(\"The number is zero.\")",
                    "goal": "Write a program that takes a number as input and checks if it's even or odd.",
                    "exercise": "# Get a number from the user\nnumber = int(input(\"Enter a number: \"))\n\n# Check if the number is even or odd using the modulo operator (%) \n# TODO - Your code here"
                },
                {
                    "title": "Looping Constructs",
                    "description": "Understand how to repeat code execution using for and while loops.",
                    "codeExample": "# Print numbers from 1 to 5 using a for loop\nfor i in range(1, 6):\n    print(i)\n\n# Calculate the sum of numbers from 1 to 10 using a while loop\nsum = 0\ncount = 1\nwhile count <= 10:\n    sum += count\n    count += 1\nprint(\"Sum of numbers from 1 to 10:\", sum)",
                    "goal": "Write a program that prints the multiplication table of a given number using a for loop.",
                    "exercise": "# Get the number for the multiplication table\nnumber = int(input(\"Enter a number: \"))\n\n# Print the multiplication table using a for loop\n# TODO - Your code here"
                },
                {
                    "title": "Introduction to Functions",
                    "description": "Learn how to define and use functions to organize your code and make it reusable.",
                    "codeExample": "# Define a function to calculate the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Get user input\nnum = int(input(\"Enter a non-negative integer: \"))\n\n# Calculate and print the factorial\nif num >= 0:\n    print(\"The factorial of\", num, \"is\", factorial(num))\nelse:\n    print(\"Factorial is not defined for negative numbers.\")",
                    "goal": "Write a function that takes two numbers as arguments and returns their sum. Call the function with two numbers and print the result.",
                    "exercise": "# Define the function to calculate the sum of two numbers\n# TODO - Your code here\n\n# Get two numbers from the user\nnum1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\n\n# Call the sum function and print the result\n# TODO - Your code here"
                }
            ]
        },
        {
            "lesson": 3,
            "title": "Lesson 3 - Working with Strings and Files",
            "description": "This lesson focuses on string manipulation techniques and interacting with files for reading and writing data.",
            "checkpoints": [
                {
                    "title": "String Manipulation",
                    "description": "Learn various methods for working with strings, including slicing, concatenation, and formatting.",
                    "codeExample": "# String slicing\ntext = \"Hello, world!\"\nprint(text[0:5])  # Output: Hello\n\n# String concatenation\ngreeting = \"Hello\"\nname = \"Alice\"\nmessage = greeting + \", \" + name + \"!\"\nprint(message)  # Output: Hello, Alice!\n\n# String formatting\nname = \"Bob\"\nage = 30\nprint(f\"My name is {name} and I am {age} years old.\")",
                    "goal": "Write a program that takes a string as input, reverses it, and checks if it's a palindrome (reads the same backward).",
                    "exercise": "# Get a string from the user\ntext = input(\"Enter a string: \")\n\n# Reverse the string\n# TODO - Your code here\n\n# Check if the reversed string is the same as the original string\n# TODO - Your code here"
                },
                {
                    "title": "File Handling",
                    "description": "Explore how to open, read from, and write to files.",
                    "codeExample": "# Writing to a file\nwith open(\"my_file.txt\", \"w\") as file:\n    file.write(\"This is some text to write to the file.\")\n\n# Reading from a file\nwith open(\"my_file.txt\", \"r\") as file:\n    content = file.read()\n    print(content)",
                    "goal": "Write a program that reads a text file, counts the number of words, and prints the count.",
                    "exercise": "# Open the file in read mode\n# TODO - Your code here\n\n# Read the content of the file\n# TODO - Your code here\n\n# Count the number of words\n# TODO - Your code here\n\n# Print the word count\n# TODO - Your code here"
                }
            ]
        },
        {
            "lesson": 4,
            "title": "Lesson 4 -  Modules, Error Handling, and List Comprehensions",
            "description": "This lesson introduces modules for code organization and reusability, error handling to make your programs more robust, and powerful list comprehensions for concise code.",
            "checkpoints": [
                {
                    "title": "Using Modules",
                    "description": "Learn how to import and use modules from Python's standard library and external packages.",
                    "codeExample": "# Import the math module\nimport math\n\n# Calculate the square root of a number\nnumber = 25\nsquare_root = math.sqrt(number)\nprint(f\"The square root of {number} is {square_root}\")",
                    "goal": "Write a program that uses the `random` module to generate a random number between 1 and 100 and asks the user to guess the number. Provide feedback to the user if their guess is too high or too low.",
                    "exercise": "# TODO: Write a program that generates a random number and allows the user to guess it."
                },
                {
                    "title": "Error Handling",
                    "description": "Learn how to handle exceptions using try-except blocks to prevent your program from crashing.",
                    "codeExample": "# Example of a ZeroDivisionError\ntry:\n    result = 10 / 0\n    print(result)\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed.\")",
                    "goal": "Write a program that prompts the user to enter two numbers and performs division. Use a try-except block to handle the `ZeroDivisionError` and `ValueError` gracefully.",
                    "exercise": "# TODO: Write a program to handle potential errors during division."
                },
                {
                    "title": "List Comprehensions",
                    "description": "Discover a powerful and concise way to create lists using list comprehensions.",
                    "codeExample": "# Create a list of squares of numbers from 1 to 10\nsquares = [x**2 for x in range(1, 11)]\nprint(squares)  # Output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
                    "goal": "Write a program that uses a list comprehension to create a new list containing only the even numbers from a given list.",
                    "exercise": "# TODO: Given a list, use a list comprehension to extract even numbers."
                }
            ]
        },
        {
            "lesson": 5,
            "title": "Lesson 5 - Object-Oriented Programming (OOP) Basics",
            "description": "This lesson introduces the fundamental concepts of object-oriented programming (OOP) in Python, including classes, objects, inheritance, and polymorphism.",
            "checkpoints": [
                {
                    "title": "Classes and Objects",
                    "description": "Learn how to define classes, create objects from classes, and work with class attributes and methods.",
                    "codeExample": "# Define a class named Dog\nclass Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n\n    def bark(self):\n        return \"Woof!\"\n\n# Create two Dog objects\ndog1 = Dog(\"Buddy\", \"Golden Retriever\")\ndog2 = Dog(\"Lucy\", \"Labrador\")\n\n# Access object attributes and methods\nprint(f\"{dog1.name} is a {dog1.breed}\")\nprint(f\"{dog2.name} is a {dog2.breed}\")\nprint(dog1.bark())  # Output: Woof!",
                    "goal": "Create a `Cat` class with attributes for name, breed, and color. Include a `meow` method that returns \"Meow!\". Create a few `Cat` objects and access their attributes and methods.",
                    "exercise": "# TODO: Define the 'Cat' class and create 'Cat' objects."
                },
                {
                    "title": "Inheritance",
                    "description": "Understand how to create new classes that inherit properties and methods from existing classes.",
                    "codeExample": "# Base class Animal\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        return \"Animal sound\"\n\n# Derived class Dog inheriting from Animal\nclass Dog(Animal):\n    def speak(self):\n        return \"Bark!\"\n\n# Create objects of both classes\nanimal = Animal(\"Generic Animal\")\ndog = Dog(\"Buddy\")\n\n# Call the speak method\nprint(animal.speak())  # Output: Animal sound\nprint(dog.speak())    # Output: Bark!",
                    "goal": "Create a `PersianCat` class that inherits from the `Cat` class you defined earlier. Override the `meow` method to return \"Purrrr...\" instead of \"Meow!\". Create a `PersianCat` object and test its methods.",
                    "exercise": "# TODO: Define the 'PersianCat' class, inheriting from 'Cat'."
                }
            ]
        },
        {
            "lesson": 6,
            "title": "Lesson 6 - Working with APIs and Data Serialization",
            "description": "This lesson explores how to interact with Application Programming Interfaces (APIs) to retrieve data from external sources and how to serialize data for storage and transmission.",
            "checkpoints": [
                {
                    "title": "Making API Requests",
                    "description": "Learn how to use the `requests` library to send HTTP requests to APIs and handle responses.",
                    "codeExample": "# Import the requests library\nimport requests\n\n# Define the API endpoint\napi_url = \"https://api.example.com/data\"\n\n# Send a GET request\nresponse = requests.get(api_url)\n\n# Check the status code\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {response.status_code}\")",
                    "goal": "Use the OpenWeatherMap API (https://openweathermap.org/api) to retrieve current weather data for a given city. You'll need to sign up for a free API key.",
                    "exercise": "# TODO: Get weather data from OpenWeatherMap API for a user-provided city."
                },
                {
                    "title": "Data Serialization with JSON",
                    "description": "Understand how to serialize data into JSON format and deserialize JSON data back into Python objects.",
                    "codeExample": "# Import the json library\nimport json\n\n# Python dictionary\ndata = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\n# Serialize data to JSON string\njson_string = json.dumps(data)\nprint(json_string)  # Output: {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\n\n# Deserialize JSON string back to Python dictionary\nparsed_data = json.loads(json_string)\nprint(parsed_data)  # Output: {'name': 'Alice', 'age': 30, 'city': 'New York'}",
                    "goal": "Fetch weather data from the OpenWeatherMap API as in the previous exercise. Then, serialize the relevant weather data (e.g., temperature, humidity, wind speed) into a JSON file named `weather_data.json`.",
                    "exercise": "# TODO: Save the retrieved weather data into a JSON file."
                }
            ]
        }
    ]
}
